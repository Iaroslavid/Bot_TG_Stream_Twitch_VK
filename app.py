import os
import time
import threading
import requests
from dotenv import load_dotenv
from obswebsocket import obsws, events

# === –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env ===
load_dotenv()

# === Telegram ===
# –í .env –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å:
# TELEGRAM_BOT_TOKEN=—Ç–≤–æ–π_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞
# TELEGRAM_CHAT_ID=–∞–π–¥–∏_—Ç–≤–æ–µ–π_–≥—Ä—É–ø–ø—ã_–∏–ª–∏_—á–∞—Ç–∞
TG_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# === Twitch ===
# –í .env –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å:
# TWITCH_USER=—Ç–≤–æ–π_–Ω–∏–∫_–Ω–∞_twitch
# TWITCH_CLIENT_ID=—Ç–≤–æ–π_client_id
# TWITCH_ACCESS_TOKEN=—Ç–≤–æ–π_access_token
TWITCH_USER = os.getenv("TWITCH_USER")
TWITCH_CLIENT_ID = os.getenv("TWITCH_CLIENT_ID")
TWITCH_ACCESS_TOKEN = os.getenv("TWITCH_ACCESS_TOKEN")

# === OBS / VK Play ===
# –í .env –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å:
# OBS_HOST=localhost
# OBS_PORT=4455
# OBS_PASSWORD=–ø–∞—Ä–æ–ª—å_websocket_–∏–∑_OBS
# VKPLAY_USER=—Ç–≤–æ–π_–Ω–∏–∫_–Ω–∞_vkplay
OBS_HOST = os.getenv("OBS_HOST", "localhost")
OBS_PORT = int(os.getenv("OBS_PORT", "4455"))
OBS_PASSWORD = os.getenv("OBS_PASSWORD", "")
VKPLAY_USER = os.getenv("VKPLAY_USER", "your_vkplay_username")  # ‚Üê —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Å–≤–æ–π –Ω–∏–∫

# === –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
# –í .env –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å CHECK_INTERVAL_SECONDS=30
INTERVAL = int(os.getenv("CHECK_INTERVAL_SECONDS", "30"))

# === Telegram: —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ===
def tg_send_html(text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ HTML-—Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram"""
    try:
        r = requests.post(
            f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage",
            data={
                "chat_id": CHAT_ID,
                "text": text,
                "parse_mode": "HTML",
                "disable_web_page_preview": False,  # –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∫–ª—é—á–µ–Ω
            },
            timeout=10,
        )
        if r.status_code != 200:
            print(f"[TG] –û—à–∏–±–∫–∞ {r.status_code}: {r.text}")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ Telegram:", e)

# === Twitch ===
def twitch_info(user_login: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–¥—ë—Ç –ª–∏ —Å—Ç—Ä–∏–º –Ω–∞ Twitch"""
    url = f"https://api.twitch.tv/helix/streams?user_login={user_login}"
    headers = {
        "Client-ID": TWITCH_CLIENT_ID,
        "Authorization": f"Bearer {TWITCH_ACCESS_TOKEN}",
    }
    try:
        r = requests.get(url, headers=headers, timeout=10)
        if r.status_code != 200:
            return None
        data = r.json().get("data", [])
        if not data:
            return None
        stream = data[0]
        title = stream.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        game = stream.get("game_name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        return {"title": title, "game": game, "url": f"https://twitch.tv/{user_login}"}
    except Exception as e:
        print("–û—à–∏–±–∫–∞ Twitch:", e)
        return None

def twitch_checker():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Twitch –∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä—è—é Twitch –∫–∞–∂–¥—ã–µ {INTERVAL} —Å–µ–∫—É–Ω–¥.")
    was_live = False
    while True:
        twitch_data = twitch_info(TWITCH_USER)
        live = twitch_data is not None
        if live and not was_live:
            twitch_msg = f"""
üü£ <b>–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å –Ω–∞ Twitch!</b>  
üé• <b>{twitch_data['title']}</b>  
üë§ –°—Ç—Ä–∏–º–µ—Ä: {TWITCH_USER}

üî¥ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ —Å—Ç—Ä–∏–º—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!  
üëâ <a href="{twitch_data['url']}">–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Twitch</a>
"""
            tg_send_html(twitch_msg.strip())
        was_live = live
        time.sleep(INTERVAL)

# === VK Play / OBS ===
vk_was_live = False

def notify_vkplay_online():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–∏–º–∞ VK Play"""
    global vk_was_live
    if vk_was_live:
        return
    vk_was_live = True

    vk_url = f"https://vkplay.live/{VKPLAY_USER}"
    vk_msg = f"""
üíô <b>–ü—Ä—è–º–∞—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è –Ω–∞ VK Play!</b>  
üì∫ –°—Ç—Ä–∏–º–µ—Ä: {VKPLAY_USER}

üî• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∏ —Å–º–æ—Ç—Ä–∏ –ø—Ä—è–º–æ –∑–¥–µ—Å—å üëá  
<a href="{vk_url}">–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ VK Play</a>
"""
    tg_send_html(vk_msg.strip())

def notify_vkplay_offline():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å—Ç—Ä–∏–º–∞"""
    global vk_was_live
    if not vk_was_live:
        return
    vk_was_live = False

    msg = """
üî¥ <b>–°—Ç—Ä–∏–º –∑–∞–≤–µ—Ä—à—ë–Ω</b>  
üïπÔ∏è –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –±—ã–ª–∏ —Å –Ω–∞–º–∏ üí´  
üí¨ –ü–æ–¥–¥–µ—Ä–∂–∏ —Å—Ç—Ä–∏–º–µ—Ä–∞ –∏ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ñ–∏—Ä!  
üìÖ –°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ ‚Äî —Å–∫–æ—Ä–æ —Å–Ω–æ–≤–∞ –≤ —ç—Ñ–∏—Ä–µ üí•
"""
    tg_send_html(msg.strip())

def on_any_event(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è OBS –æ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏"""
    try:
        data = message.__dict__
        if data.get("name") != "StreamStateChanged":
            return

        payload = data.get("datain", {})
        state = payload.get("outputState")
        active = payload.get("outputActive")

        if active and state == "OBS_WEBSOCKET_OUTPUT_STARTED":
            notify_vkplay_online()
        elif not active and state == "OBS_WEBSOCKET_OUTPUT_STOPPED":
            notify_vkplay_offline()
    except Exception as e:
        print("–û—à–∏–±–∫–∞ OBS:", e)

def connect_obs():
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ OBS WebSocket –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è"""
    while True:
        try:
            print(f"üîå –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ OBS WebSocket ({OBS_HOST}:{OBS_PORT})...")
            ws = obsws(OBS_HOST, OBS_PORT, OBS_PASSWORD)
            ws.connect()
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ OBS WebSocket.")

            ws.register(on_any_event)
            ws.register(on_any_event, events.StreamStarted)
            ws.register(on_any_event, events.StreamStopped)

            while True:
                time.sleep(1)
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ OBS:", e)
            print("üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫...")
            time.sleep(5)

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: Twitch + VK Play –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
    threading.Thread(target=twitch_checker, daemon=True).start()
    connect_obs()
